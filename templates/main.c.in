/**

	@My_Project_Title@ -- @My_Project_Description@

	@file main.c

	@brief 


	@author	@My_Project_Author@
	@bug	

**/

/*

	@My_Project_Copyright@


	@My_Project_License_Indented@

*/


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>


#ifdef TEST
	#include "CuTest.h"
#endif


#ifdef TEST
// Remove static keyword to enable this test
static void Test_void_function(CuTest * tc) {
	CuAssertIntEquals(tc, 0, 0);
}
#endif


#define F(i,n) for(int i= 0;i<n;i++)


int main(int argc, char * const argv[]) {
	int option;
	int err = 0;

	// Set offset to 1 if we want an "action" immediately following the program when called
	// e.g.  ./foo bar -x -y -z
	int offset = 0;

	if (argc > 1) {
		if (argv[1][0] != '-' || argv[1][1] == '-') {
			// Skip action or long argument (e.g. `--help`)
			offset = 1;
		}
	}


	// Read short options
	while ((option = getopt(argc - offset, &argv[offset], ":hxy:")) != -1) {
		switch (option) {
			case 'h':
				// help -- display usage
				fprintf(stdout, "%s: option recognized -- %c\n", argv[0], option);
				err = -1;
				break;

			case 'x':
				// option without argument
				fprintf(stdout, "%s: option recognized -- %c\n", argv[0], option);
				break;

			case 'y':
				// option with required argument
				fprintf(stdout, "%s: option recognized -- %c (%s)\n", argv[0], option, optarg);
				break;

			case ':':
				// required argument is missing
				fprintf(stdout, "%s: option needs value -- %c\n", argv[0], optopt);
				err = 1;
				break;

			case '?':
				// option is not recognized
				fprintf(stderr, "%s: option not recognized -- %c\n", argv[0], optopt);
				err = 1;
				break;
		}
	}


	// Is an action required?
	if (!err && !offset) {
		fprintf(stderr, "%s: action missing\n", argv[0]);
		err = 1;
	}

	if (err == 0 && offset) {
		if (argc < offset + 1) {
			// Required action missing
			err = 1;
		} else if (strcmp(argv[1], "--help") == 0) {
			// help -- display usage
			err = -1;
		} else if (strcmp(argv[1], "action") == 0) {
			// action = 'action'
			fprintf(stderr, "%s: action -- %s\n", argv[0], argv[1]);
		} else {
			fprintf(stderr, "%s: action not recognized -- %s\n", argv[0], argv[1]);
			err = 1;
		}
	}


	// Read arguments
	for (optind += offset; optind < argc; optind++) {
		fprintf(stderr, "%s: argument -- %s\n", argv[0], argv[optind]);
	}


	if (err) {
		// Error
		fprintf(stderr, "usage: %s {action1|action2} [-xh] [-y arg]\n", argv[0]);
	} else {
		// Proceed
	}


	// Clean up

	return err;
}
